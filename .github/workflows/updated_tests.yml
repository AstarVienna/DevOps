name: Updated Tests
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Allow this workflow to be called from other repositories.
  workflow_call:

# This workflow needs Poetry, so no flag is included.

jobs:
  run-tests:
    name: ${{ matrix.experimental && '⚠️ ' || '' }}${{ matrix.os }}, ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.10', '3.12', '3.13']
        experimental: [false]
        include:
          - os: ubuntu-latest
            python-version: '3.14'
            experimental: true
          - os: macos-latest
            python-version: '3.14'
            experimental: true
          - os: windows-latest
            python-version: '3.14'
            experimental: true

    steps:
      - uses: actions/checkout@v5

      - name: Install poetry
        shell: bash
        run: pipx install poetry==2.1.4

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        continue-on-error: ${{ matrix.experimental }}
        shell: bash
        run: |
          poetry lock
          poetry install --with test --all-extras
          poetry add git+https://github.com/AstarVienna/ScopeSim_Data.git
          poetry env use "$(python -c 'import sys; print(sys.executable)')"

      - name: Check Python version
        run: poetry run python -V >> "$GITHUB_STEP_SUMMARY"

      - name: Update dependencies
        continue-on-error: ${{ matrix.experimental }}
        shell: bash
        run: poetry update | tee -a $GITHUB_STEP_SUMMARY

      - name: Run Pytest
        continue-on-error: ${{ matrix.experimental }}
        shell: bash
        run: poetry run pytest -m "not webtest" --cov --cov-report=xml
