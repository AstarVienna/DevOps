name: Tests
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      poetry:
        type: boolean
        description: "Use Poetry-based workflow."
        required: false
        default: true

  # Allow this workflow to be called from other repositories.
  workflow_call:
    inputs:
      poetry:
        type: boolean
        description: "Use Poetry-based workflow."
        required: false
        default: true
      trigger:
        type: string
        description: "Fake input parameter to tell if triggered from outside. Do not set manually."
        required: false
        default: "external"

jobs:
  run-tests:
    name: ${{ matrix.os }}, ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4

      - name: Decide if poetry
        id: decide
        env:
          USE_POETRY: "${{ (((github.event_name == 'pull_request') || (github.event_name == 'push')) && (inputs.trigger != 'external')) || ((inputs.poetry == true) && ((github.event_name == 'workflow_dispatch') || (inputs.trigger == 'external'))) }}"
        run: echo "USE_POETRY=$USE_POETRY" >> "$GITHUB_OUTPUT"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Poetry
        if: ${{ steps.decide.outputs.USE_POETRY == 'true' }}
        shell: bash
        run: |
          python3 -m pip install --user pipx
          python3 -m pipx ensurepath
          pipx install poetry==2.1.4

      - name: Install dependencies with Poetry
        if: ${{ steps.decide.outputs.USE_POETRY == 'true' }}
        run: |
          poetry install --with test --all-extras
          poetry add git+https://github.com/AstarVienna/ScopeSim_Data.git

      - name: Run Pytest with Poetry
        if: ${{ steps.decide.outputs.USE_POETRY == 'true' }}
        run: poetry run pytest -m "not webtest" --cov --cov-report=xml

      - name: Install dependencies without Poetry
        if: ${{ steps.decide.outputs.USE_POETRY == 'false' }}
        run: |
          python -m pip install --upgrade pip
          pip install git+https://github.com/AstarVienna/ScopeSim_Data.git
          # Install this clone of the project. This is relevant because for
          # example ScopeSim has ScopeSim_Templates as a test-dependency
          # and that package has ScopeSim as a dependency. So the PyPI version
          # of ScopeSim would be installed without the "pip install ." line.
          pip install .
          # TODO: It should not be necessary to install the dev dependencies.
          #       Perhaps create a separate test for that?
          pip install .[test,dev]
          pip install pytest pytest-cov

      - name: Run Pytest without Poetry
        if: ${{ steps.decide.outputs.USE_POETRY  == 'false' }}
        run: pytest -m "not webtest" --cov --cov-report=xml

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
